# Matterhorn is a TUI chat client for the Mattermost chat service
# (https://mattermost.com).  Matterhorn is written in Haskell and
# hosted on Github.  Some of the packages it requires have more recent
# or specific versions than those available in the standard
# nixos-unstable nixpkgs channel.

github = RepoIdent(team='matterhorn-chat')  # A helper supplying defaults

package_spec = [
    Project("matterhorn"),

    # The top-level package.  The Local specification indicates the
    # local development directory where this source should be found;
    # if that directory isn't found, Local is ignored and the package
    # is sourced from Github, using the version to specify which git
    # branch.  Version can be a branch name or a commit hash.
    HaskellPackage('matterhorn',
                   Local('/home/kquick/dev/Matterhorn/matterhorn'),
                   github,
                   version='develop',
    ),
    HaskellPackage('mattermost-api',
                   Local('/home/kquick/dev/Matterhorn/mattermost-api'),
                   github,
                   version='develop',
                   dontCheck=True,  # Don't run the tests
    ),
    HaskellPackage('mattermost-api-qc',
                   github,
                   version='develop',
    ),

    # Here are some packages that will be obtained from Hackage
    # (because there is neither a Local nor a RepoIdent specification.
    # When fetching from Hackage, the version (by default, the second
    # unnamed argument) is the numeric version to obtain from Hackage.
    HaskellPackage("asn1-encoding", "0.9.5"),
    HaskellPackage("asn1-parse", "0.9.4"),
    HaskellPackage("asn1-types", "0.3.2"),
    HaskellPackage("aspell-pipe", "0.3"),
    HaskellPackage("async", "2.2.1"),
    HaskellPackage('brick', '0.36.3'),  # needs 0.36.1 minimum for GHC 8.4, only 0.34.1 is available yet via channels
    HaskellPackage("brick-skylighting", "0.2"),
    HaskellPackage("config-ini", "0.2.2.0", dontCheck=True),  # Tests cannot be run under Nix.
    HaskellPackage("megaparsec", "6.5.0", dontCheck=True, dontHaddock=True), # skip generating docs
    HaskellPackage("skylighting-core", "0.7.1"),

    HaskellPackage("Unique", "0.4.7.1"),
    HaskellPackage("vty", "5.20", dontCheck=True),
    HaskellPackage("websockets", "0.12.4.0"),

    HaskellPackage('cryptonite', "0.24"),
    HaskellPackage('memory', "0.14.16"),
    HaskellPackage('foundation', '0.0.20'),

    # CBI_Variants is ignored for the local -project file, but can
    # specify different variations for Hydra (https://nixos.org/hydra)
    # to build.  In addition, Hydra wants to check out the build
    # specifications from a repository, so the proj_reposerver
    # specifies where the files generated by "$ vernix --hydra" will
    # be committed.  The project name configured on Hydra must match
    # the "Project(name)" specification above.
    CBI_Variants(proj_reposerver = 'https://gitlab.nospam!.com',
                 email_override = 'kquick@nospam!.com',
                 # Specifies which GHC versions the packages will be
                 # built with.
                 ghcver = [ 'ghc822',
                            'ghc842'
                 ],
                 # Specifies which branches will be built.  Defaults
                 # to "[ 'master' ]".
                 repo_branch = [ 'master', 'develop' ],
    ),

]
